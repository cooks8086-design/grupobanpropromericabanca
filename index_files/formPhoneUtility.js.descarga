// Data
const phoneMasks = {
    brazilPhoneMask_br: ['(99) 9999-9999', '(99) 99999-9999'],
    canadaPhoneMask_ca: ['(999) 999-9999[ x99999]', '(999) 999-9999'],
    canadaPhoneMaskShort_ca: '(999) 999-9999',
    chilePhoneMask_cl: '999 999[ 999 99]',
    colombiaPhoneMask_co: '999-999-9999',
    default: '(999) 999-9999[ x99999]',
    mexicoPhoneMask_mx: '99 9999 9999',
    peruPhoneMask: '(999) 999-999',
    unitedStatesPhoneMask_us: ['(999) 999-9999[ x99999]', '(999) 999-9999'],
    unitedStatesPhoneMaskShort_us: '(999) 999-9999',
}

// Functions
function getPhoneMask(isPhoneShort = false) {
    console.log("country is: ", DlronGlobal_DealerInfoCountry)
    switch (DlronGlobal_DealerInfoCountry) {
        // Using Brazil for SITESAA-4333, not using for other countries as of 11/1/22.
        /*case 0:
            return isPhoneShort ? phoneMasks.unitedStatesPhoneMaskShort_us : phoneMasks.unitedStatesPhoneMask_us;
        case 1:
            return isPhoneShort ? phoneMasks.canadaMaskShort_ca : phoneMasks.canadaMask_ca;
        case 2:
            return phoneMasks.mexicoPhoneMask_mx;
        case 3:
            return phoneMasks.colombiaPhoneMask_co;
        case 4:
            return phoneMasks.chilePhoneMask_cl;
        case 5:            
            return phoneMasks.peruPhoneMask;*/
        case 6:
            return phoneMasks.brazilPhoneMask_br;
        default:
            return phoneMasks.default;
    }
}

function validatePhone(value) {
    switch (DlronGlobal_DealerInfoCountry) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:     
            return true;       
        case 6:
            var patterns = [
                new RegExp(/^\(\d{2}\)( )(\d{4})(-)(\d{4})$/), 
                new RegExp(/^\(\d{2}\)( )(\d{5})(-)(\d{4})$/)];
            var invalidMsg = 'Insira um número de telefone válido no formato (12) 3456-9999 ou (12) 34567-9999.';
            return phoneIsValid(value, patterns, invalidMsg);
        default:
            return true;       
    }
}

function phoneIsValid(value, patterns, invalidMsg) {
    var phoneIsValid = false;
    patterns.forEach((pattern) => {
        if (!phoneIsValid) {
            phoneIsValid = pattern.test(value);
        }
    });

    if (phoneIsValid) {
        return true;
    } else {
        alert(invalidMsg);			
        return false;
    }
};

function getPhonePayloadValue(value) {
    var phonePayloadValue = value;
    switch (DlronGlobal_DealerInfoCountry) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:     
            return phonePayloadValue;       
        case 6:
            phonePayloadValue = value.replace(/[() -]/g, "");
            return "+55" + phonePayloadValue;
        default:
            return phonePayloadValue;       
    }
}