"use strict";
var DealerOnTrack = (function () {
    function DealerOnTrack() {
        this.ticket = "CONPLAT-1644";
        this.resources = "/resources/components/dealerOnTrack/dealerOnTrack.js";
        this.src = "/src/components/dealerOnTrack/dealerOnTrack.ts";
        this.readme = "Global handler for DealerOnTrack.events. Add attributes to elements\n  that should be tracked. The following attributes exist:\n  category (required), action (required), label, value, callBackTrackEvent\n  ";
    }
    Object.defineProperty(DealerOnTrack, "safeGetAllTrackers", {
        get: function () {
            return typeof (ga) !== "undefined" && (ga === null || ga === void 0 ? void 0 : ga.getAll) ? ga.getAll() : (function () { console.warn("'ga.getAll' is not defined"); return null; })();
        },
        enumerable: false,
        configurable: true
    });
    DealerOnTrack.initialize = function (initializationData) {
        this.isNoOp = initializationData.IsNoOp;
        window.addEventListener("DOMContentLoaded", function () {
            var dealerOnTrackers = document.querySelectorAll("[data-dealerontrack-type]");
            dealerOnTrackers.forEach(function (elem) {
                DealerOnTrack.setupEventByType(elem);
            });
            console.log("DealerOnTrack Initialized");
            var priceBlockItems = document.querySelectorAll('.priceBlockItemButton > a, .priceBlockItemOffer > a, .priceBlockItemInput > a, .priceBlockItemButton > price-details-button > a, .priceBlockItemButton > button, .priceBlockItemInput input-button-price-element.btn');
            priceBlockItems.forEach(function (priceStakElement) {
                if (!priceStakElement.hasAttribute("data-dealerontrack-type")) {
                    priceStakElement.addEventListener("click", function (e) {
                        var listElement = priceStakElement.closest('li');
                        var action = listElement === null ? "" : listElement.dataset.dealerontrackPosition;
                        var isSrp = priceStakElement.closest('.srpVehicle, .vehicle-card') === null ? false : true;
                        DealerOnTrack.pricingStackEvent(e, action, isSrp ? 'SRP' : 'VDP');
                    });
                }
            });
        });
    };
    DealerOnTrack.setupDynamicElements = function () {
        var dealerOnTrackers = document.querySelectorAll("[data-dealerontrack-type]:not([data-dealerontrack-enabled])");
        dealerOnTrackers.forEach(function (elem) {
            DealerOnTrack.setupEventByType(elem);
        });
    };
    DealerOnTrack.setupEventByType = function (elem) {
        var _this = this;
        var _a, _b, _c, _d, _e;
        var type = (_a = elem.dataset.dealerontrackType) !== null && _a !== void 0 ? _a : "default";
        var category = elem.dataset.dealerontrackCategory;
        var action = (_b = elem.dataset.dealerontrackAction) !== null && _b !== void 0 ? _b : "";
        var label = (_c = elem.dataset.dealerontrackLabel) !== null && _c !== void 0 ? _c : "";
        var value = (_d = elem.dataset.dealerontrackValue) !== null && _d !== void 0 ? _d : "";
        var item = (_e = elem.dataset.dealerontrackItem) !== null && _e !== void 0 ? _e : "";
        var callback = elem.dataset.dealerontrackCallback;
        var trigger = elem.dataset.dealerontrackTrigger;
        if (elem.dataset.dealerontrackEnabled === "true") {
            return;
        }
        switch (trigger) {
            case "change":
                elem.addEventListener(trigger, function () {
                    var _a, _b;
                    _this.event(category, (_b = (_a = elem.dataset.dealerontrackPosition) !== null && _a !== void 0 ? _a : new TaggingCommandParser(elem.dataset.dealerontrackAction).Value) !== null && _b !== void 0 ? _b : "On Click", new TaggingCommandParser(label).Value, value, callback);
                });
                break;
            default: {
                switch (type) {
                    case "pricingStack":
                        elem.addEventListener("click", function (e) {
                            _this.pricingStackDataAttributesEvent(action, value, category, item, label);
                        });
                        break;
                    default:
                        elem.addEventListener("click", function (e) {
                            var _a, _b;
                            _this.event(category, (_b = (_a = elem.dataset.dealerontrackPosition) !== null && _a !== void 0 ? _a : new TaggingCommandParser(elem.dataset.dealerontrackAction).Value) !== null && _b !== void 0 ? _b : "On Click", new TaggingCommandParser(label).Value, value, callback);
                        });
                        break;
                }
            }
        }
        elem.dataset.dealerontrackEnabled = "true";
    };
    DealerOnTrack.event = function (category, action, label, value, callback) {
        if (this.isNoOp) {
            if (callback) {
                callback(action);
            }
            return;
        }
        var callbackCalled = false;
        if (callback) {
            setTimeout(function () {
                if (!callbackCalled) {
                    callbackCalled = true;
                    console.log('DealerOnTrack callBack function on timeout');
                    callback(action);
                }
            }, 3000);
        }
        var trackerCount = 0;
        var allTrackers = this.safeGetAllTrackers;
        if (!allTrackers) {
            return;
        }
        if (label === undefined) {
            for (var i = 0; i < allTrackers.length; i++) {
                var tracker = allTrackers[i];
                if (callback) {
                    ga('' + tracker.get('name') + '.send', 'event', category, action, {
                        hitCallback: function () {
                            trackerCount = trackerCount + 1;
                            if (allTrackers.length == trackerCount && !callbackCalled) {
                                callbackCalled = true;
                                console.log('DealerOnTrack hitCallback called!');
                                callback(action);
                            }
                        }
                    });
                    console.log('ga send event called!');
                }
                else {
                    ga('' + tracker.get('name') + '.send', 'event', category, action);
                }
            }
        }
        else if (value === undefined || value === "") {
            for (var i = 0; i < allTrackers.length; i++) {
                var tracker = allTrackers[i];
                if (callback) {
                    ga('' + tracker.get('name') + '.send', 'event', category, action, label, {
                        hitCallback: function () {
                            trackerCount = trackerCount + 1;
                            if (allTrackers.length == trackerCount && !callbackCalled) {
                                callbackCalled = true;
                                console.log('DealerOnTrack hitCallback called!');
                                callback(action);
                            }
                        }
                    });
                    console.log('ga send event called!');
                }
                else {
                    ga('' + tracker.get('name') + '.send', 'event', category, action, label);
                }
            }
        }
        else {
            for (var i = 0; i < allTrackers.length; i++) {
                var tracker = allTrackers[i];
                if (callback) {
                    ga('' + tracker.get('name') + '.send', 'event', category, action, label, value, {
                        hitCallback: function () {
                            trackerCount = trackerCount + 1;
                            if (allTrackers.length == trackerCount && !callbackCalled) {
                                callbackCalled = true;
                                console.log('DealerOnTrack hitCallback called!');
                                callback(action);
                            }
                        }
                    });
                    console.log('DealerOnTrack ga send event called!');
                }
                else {
                    ga('' + tracker.get('name') + '.send', 'event', category, action, label, value);
                }
            }
        }
        console.log("Fired DealerOnTrack.event(".concat(category, ", ").concat(action, ", ").concat(label, ", ").concat(value, ", ").concat(callback, ")"));
    };
    DealerOnTrack.pricingStackEvent = function (event, action, value) {
        if (this.isNoOp) {
            return;
        }
        var eventAction = action ? action : window.location.href;
        var element = event.target || event.currentTarget || event.toElement;
        var isClickToCall = element.dataset.elementtype === "LinkButton" && element.classList.contains('callNowClass');
        var category = isClickToCall ? "Click-to-Call" : "VDP/SRP Buttons";
        var typeOfEvent = element.target === "_blank" ? "Open in new Tab - " : "";
        var elementText = element.innerText || element.title || element.alt;
        var label = value + ' - ' + typeOfEvent + (isClickToCall ? 'Call for Details' : elementText);
        this.event(category, eventAction, label);
    };
    DealerOnTrack.pricingStackDataAttributesEvent = function (action, value, category, item, buttonLabel) {
        if (this.isNoOp) {
            return;
        }
        var eventAction = action ? action : window.location.href;
        var label = value + ' - ' + item + ' - ' + buttonLabel;
        this.event(category, eventAction, label);
    };
    DealerOnTrack.isNoOp = false;
    return DealerOnTrack;
}());
var TaggingCommand = (function () {
    function TaggingCommand(cmd) {
        this.supportedCommands = ["selector", "script", "literal"];
        this.supportedScripts = ["geturl"];
        this.parseCommand(cmd);
    }
    TaggingCommand.prototype.parseCommand = function (cmd) {
        var command = cmd.split("::");
        this.command = command[0];
        if (command.length > 1) {
            var instructions = command[1].split(",");
            this.primaryInstruction = instructions[0];
            if (instructions.length > 1) {
                this.secondaryInstruction = instructions[1];
            }
        }
        if (command.length > 2) {
            var defaultInstructions = command[2].split(",");
            this.defaultInstruction = defaultInstructions[0];
            if (defaultInstructions.length > 1) {
                this.defaultSecondaryInstruction = defaultInstructions[1];
            }
        }
    };
    Object.defineProperty(TaggingCommand.prototype, "IsValid", {
        get: function () {
            if (!this.command || !this.primaryInstruction) {
                return false;
            }
            if (this.command == "script" && !this.supportedScripts.includes(this.primaryInstruction)) {
                return false;
            }
            var isValidCommand = this.supportedCommands.includes(this.command);
            return isValidCommand;
        },
        enumerable: false,
        configurable: true
    });
    return TaggingCommand;
}());
var TaggingCommandParser = (function () {
    function TaggingCommandParser(item) {
        this.commands = [];
        this.isParsable = false;
        this.item = item;
        this.parseCommands(item);
    }
    TaggingCommandParser.prototype.parseCommands = function (item) {
        var _this = this;
        var commands = item.split("|");
        commands.forEach(function (cmd) {
            var tagCommand = new TaggingCommand(cmd);
            if (tagCommand.IsValid) {
                _this.commands.push(tagCommand);
            }
        });
        if (this.commands.length > 0) {
            this.isParsable = true;
        }
    };
    Object.defineProperty(TaggingCommandParser.prototype, "Value", {
        get: function () {
            var _this = this;
            if (!this.isParsable) {
                return this.item;
            }
            var result = "";
            this.commands.forEach(function (cmd) {
                switch (cmd.command) {
                    case "selector":
                        var value = _this.getElementValue(cmd.primaryInstruction, cmd.secondaryInstruction);
                        if (!value && cmd.defaultInstruction) {
                            value = _this.getElementValue(cmd.defaultInstruction, cmd.defaultSecondaryInstruction);
                        }
                        result += value;
                        break;
                    case "literal":
                        result += cmd.primaryInstruction;
                        break;
                    case "geturl":
                        result += window.location.href;
                        break;
                }
            });
            if (result) {
                return result;
            }
            return this.item;
        },
        enumerable: false,
        configurable: true
    });
    TaggingCommandParser.prototype.getElementValue = function (selector, secondarySelector) {
        var _this = this;
        var elements = document.querySelectorAll(selector);
        var values = [];
        elements.forEach(function (elem) {
            var _a, _b, _c;
            var currentValue;
            if (secondarySelector) {
                if (secondarySelector === null || secondarySelector === void 0 ? void 0 : secondarySelector.startsWith("data-")) {
                    currentValue = elem === null || elem === void 0 ? void 0 : elem.getAttribute(secondarySelector);
                }
                else {
                    currentValue = _this.getElementValue(secondarySelector);
                }
            }
            else {
                if (elem instanceof HTMLSelectElement) {
                    var selectedValue = (_a = elem[elem.selectedIndex]) === null || _a === void 0 ? void 0 : _a.innerText;
                    if (selectedValue) {
                        currentValue = selectedValue;
                    }
                }
                else {
                    currentValue = (_c = (_b = elem.value) !== null && _b !== void 0 ? _b : elem.textContent) !== null && _c !== void 0 ? _c : elem.innerText;
                }
            }
            if (currentValue) {
                values.push(currentValue.replace(/[\n\r]+/g, '').trim());
            }
        });
        if (values.length == 0) {
            return "";
        }
        else {
            return values.join(",");
        }
    };
    return TaggingCommandParser;
}());
try {
    module.exports = { TaggingCommand: TaggingCommand, TaggingCommandParser: TaggingCommandParser };
}
catch (e) {
    console.warn("module is not defined");
}
